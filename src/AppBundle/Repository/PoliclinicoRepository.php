<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Policlinico;
use Doctrine\ORM\EntityRepository;
use Exception;


/**
 * PoliclinicoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PoliclinicoRepository extends EntityRepository
{
    public function masterAgregarPoliclinico($user, $data)
    {
        $em = $this->getEntityManager();

        $em->beginTransaction();
        try {

            //agregar policlínico
            $policlinico = $this->agregarPoliclinico($data);

            if (is_string($policlinico)) {
                $em->rollback();
                return $policlinico;
            }

            $dataTraza = array(
                'modulo' => 'Policlínico',
                'accion' => 'Insertar',
                'descripcion' => 'Se insertó un nuevo policlínico con el nombre: ' . $data['nombre']
            );
            $traza = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($traza)) {
                $em->rollback();
                return $traza;
            }

            $codigoUnidad = $this->generarCodigoUnidad($policlinico->getId());
            if ($codigoUnidad !== null) {
                $policlinico->setCodigoUnidad($codigoUnidad);
                $em->flush();
            } else {
                return 'Se produjo un error al generar el código de unidad';
            }

            $codMunicipio = $policlinico->getMunicipio()->getCodigo();
            $tipoUnidad = $policlinico->getTipoUnidad();
            $separador = $policlinico->getSeparador();

            $codigoCompleto = $this->generarCodigoCompleto($codMunicipio, $tipoUnidad, $separador, $codigoUnidad);
            if ($codigoCompleto !== null) {
                $policlinico->setCodigoUnidadFull($codigoCompleto);
                $em->flush();
            } else {
                return 'Se produjo un error al generar el código completo de un policlínico';
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al registrar el policlínico';
        }
        return $msg;
    }

    public function agregarPoliclinico($data)
    {
        try {
            $em = $this->getEntityManager();
            $policlinico = new Policlinico();
            $policlinico->setNombre($data['nombre']);

            $municipio = $em->getRepository('AppBundle:Municipio')->find($data['municipio']);
            if($municipio !== null){
                $policlinico->setMunicipio($municipio);
            }else {
                return 'Se produjo un error al intentar localizar el municipio';
            }

            $em->persist($policlinico);
            $em->flush();
            $msg = $policlinico;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'El policlínico ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al insertar el policlínico';
            }
        }
        return $msg;
    }

    public function generarCodigoUnidad($id)
    {
        try {
            $codigoUnidad = null;
            $codigoUnidad = str_pad($id, 3, '0', STR_PAD_LEFT);

        } catch (Exception $e) {
            $codigoUnidad = null;
        }

        return $codigoUnidad;
    }

    public function generarCodigoCompleto($codMunicipio, $tipoUnidad, $separador, $codigoUnidad)
    {
        try {
            $codigoUnidadFull = null;
            $codigoUnidadFull = $codMunicipio . $tipoUnidad . $separador . $codigoUnidad;

        } catch (Exception $e) {
            $codigoUnidadFull = null;
        }

        return $codigoUnidadFull;
    }

    public function masterModificarPoliclinico($user, $data)
    {
        $em = $this->getEntityManager();

        $em->beginTransaction();
        try {

            //agregar policlínico
            $policlinico = $this->modificarPoliclinico($data);

            if (is_string($policlinico)) {
                $em->rollback();
                return $policlinico;
            }

            $dataTraza = array(
                'modulo' => 'Policlínico',
                'accion' => 'Insertar',
                'descripcion' => 'Se modificó el policlínico con el nombre: ' . $data['nombre']
            );
            $traza = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($traza)) {
                $em->rollback();
                return $traza;
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar el policlínico';
        }
        return $msg;
    }

    public function modificarPoliclinico($data)
    {
        try {
            $em = $this->getEntityManager();
            $policlinico = $em->getRepository('AppBundle:Policlinico')->find($data['id']);

            if (!empty($policlinico)) {
                $policlinico->setNombre($data['nombre']);

                $municipioAnterior = $policlinico->getMunicipio();
                $municipio = $em->getRepository('AppBundle:Municipio')->find($data['municipio']);
                if($municipio !== null){
                    if ($municipioAnterior !== $municipio) {
                        $policlinico->setMunicipio($municipio);
                        $codMunicipio = $municipio->getCodigo();
                        $tipoUnidad = $policlinico->getTipoUnidad();
                        $separador = $policlinico->getSeparador();
                        $codigoUnidad = $policlinico->getCodigoUnidad();
                        $codigoCompleto = $this->generarCodigoCompleto($codMunicipio, $tipoUnidad, $separador, $codigoUnidad);
                        if ($codigoCompleto !== null) {
                            $policlinico->setCodigoUnidadFull($codigoCompleto);
                        } else {
                            return 'Se produjo un error al generar el código completo de un policlínico';
                        }
                    }
                }else {
                    return 'Se produjo un error al intentar localizar el municipio';
                }


                $em->flush();
                $msg = $policlinico;
            } else {
                $msg = $policlinico;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar el policlínico';
        }

        return $msg;
    }

    public function eliminarPoliclinico($id)
    {
        try {
            $em = $this->getEntityManager();
            $policlinico = $em->getRepository('AppBundle:Policlinico')->find($id);

            if (!empty($policlinico)) {
                $em->remove($policlinico);
                $em->flush();
                $msg = $policlinico;
            } else {
                $msg = $policlinico;
            }

        } catch (Exception $e) {

            $msg = 'Se produjo un error al eliminar el policlínico';

        }
        return $msg;
    }

}
