<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Encuesta;
use AppBundle\Entity\EncuestaPregunta;
use AppBundle\Entity\Notificacion;
use AppBundle\Entity\Persona;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * EncuestaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EncuestaRepository extends EntityRepository
{
    public function comprobarEncuesta($encuesta, $user)
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT e.id FROM AppBundle:Encuesta e 
                JOIN e.encuesta_entrevistadores ee
                WHERE e.id =:p1
                AND ee.id =:p2';
        $query = $em->createQuery($dql);
        $query->setParameter('p1', $encuesta);
        $query->setParameter('p2', $user);

        return count($query->getResult());
    }

    public function masterAgregarEncuesta($user, $dataPersona, $dataGenerales, $dataDiagnostico, $dataPreguntas)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar o modificar persona
            $persona = $this->agregarModificarPersona($dataPersona);

            if (is_string($persona)) {
                $em->rollback();
                return $persona;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Insertar',
                'descripcion' => 'Se insertaron los datos generales de la persona: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosPersona = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosPersona)) {
                $em->rollback();
                return $trazaDatosPersona;
            }

            //agregar las generales y el diagnostico de la encuesta
            $encuesta = $this->agregarEncuesta($user->getId(), $dataGenerales, $dataDiagnostico, $persona);

            if (is_string($encuesta)) {
                $em->rollback();
                return $encuesta;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Insertar',
                'descripcion' => 'Se insertaron los datos generales de la encuesta: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosGenerales = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosGenerales)) {
                $em->rollback();
                return $trazaDatosGenerales;
            }

            $existenPreguntas = false;

            if ($dataPreguntas['d1']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d1']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d2']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d2']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d3']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d3']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d4']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d4']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d5']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d5']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d6']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d6']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d7']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d7']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d8']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d8']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d9']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d9']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($existenPreguntas) {
                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Insertar',
                    'descripcion' => 'Se insertaron las preguntas de la encuesta: ' . $persona->getCarnetIdentidad()
                );
                $trazaPreguntas = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaPreguntas)) {
                    $em->rollback();
                    return $trazaPreguntas;
                }

                $nivelAcceso = 1;
                $rol = 4;
                //Notificar la encuesta
                $notificar = $this->notificarPrimeraEncuesta($encuesta->getId(), $rol, $nivelAcceso);

                if (is_string($notificar)) {
                    $em->rollback();
                    return $notificar;
                }

                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Notificar',
                    'descripcion' => 'El supervisor del policlÃ­nico fue notificado.'
                );
                $trazaNotificar = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaNotificar)) {
                    $em->rollback();
                    return $trazaNotificar;
                }
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al registrar la encuesta';
        }
        return $msg;
    }

    public function agregarModificarPersona($dataPersona)
    {
        try {
            $em = $this->getEntityManager();
            $persona = $em->getRepository('AppBundle:Persona')->findOneBy(array('carnetIdentidad' => $dataPersona['ci']));

            if (!empty($persona)) {
                $persona->setNombre(strtoupper($dataPersona['nombre']));
                $persona->setPrimerApellido(strtoupper($dataPersona['primerApellido']));
                $persona->setSegundoApellido(strtoupper($dataPersona['segundoApellido']));
                $persona->setFechaNacimiento(new DateTime($dataPersona['fechaNacimiento']));
                $persona->setSexo($dataPersona['sexo']);

                $em->flush();
                $msg = $persona;
            } else {
                $persona = new Persona();
                $persona->setCarnetIdentidad($dataPersona['ci']);
                $persona->setNombre(strtoupper($dataPersona['nombre']));
                $persona->setPrimerApellido(strtoupper($dataPersona['primerApellido']));
                $persona->setSegundoApellido(strtoupper($dataPersona['segundoApellido']));
                $persona->setFechaNacimiento(new DateTime($dataPersona['fechaNacimiento']));
                $persona->setSexo($dataPersona['sexo']);

                $em->persist($persona);
                $em->flush();
                $msg = $persona;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al guardar los datos generales de la persona';
        }

        return $msg;
    }

    public function agregarEncuesta($user, $dataGenerales, $dataDiagnostico, $persona)
    {
        try {
            $em = $this->getEntityManager();
            $encuesta = new Encuesta();
            $encuesta->setFechaValoracion(new DateTime($dataGenerales['fechaValoracion']));
            $encuesta->setEdad($dataGenerales['edad']);
            $encuesta->setGenero($dataGenerales['genero']);
            $encuesta->setAprobacion(1);

            $policlinico = $em->getRepository('AppBundle:Policlinico')->find($dataGenerales['policlinico']);
            $encuesta->setPoliclinico($policlinico);

            $muncipioResidencia = $em->getRepository('AppBundle:Municipio')->find($dataGenerales['municipioResidencia']);
            $encuesta->setMuncipioResidencia($muncipioResidencia);

            $estadoCivil = $em->getRepository('AppBundle:EstadoCivil')->find($dataGenerales['estadoCivil']);
            $encuesta->setEstadoCivil($estadoCivil);

            $registra = $em->getRepository('AppBundle:Usuario')->find($user);
            $encuesta->setUsuarioRegistra($registra);

            $encuesta->setPersona($persona);

            $personaEmpleos = new ArrayCollection();
            foreach ($dataGenerales['empleos'] as $empleo) {
                $personaEmpleos[] = $em->getRepository('AppBundle:Empleo')->find($empleo);
            }
            $encuesta->setEncuestaEmpleos($personaEmpleos);

            $personaGrados = new ArrayCollection();
            foreach ($dataDiagnostico['grados'] as $grado) {
                $personaGrados[] = $em->getRepository('AppBundle:GradoIndependencia')->find($grado);
            }
            $encuesta->setEncuestaGrados($personaGrados);

            $personaFactores = new ArrayCollection();
            foreach ($dataDiagnostico['factores'] as $factor) {
                $personaFactores[] = $em->getRepository('AppBundle:FactorRiesgo')->find($factor);
            }
            $encuesta->setEncuestaRiesgos($personaFactores);

            $personaDiagnosticos = new ArrayCollection();
            foreach ($dataDiagnostico['diagnosticos'] as $diagnostico) {
                $personaDiagnosticos[] = $em->getRepository('AppBundle:DiagnosticoMedico')->find($diagnostico);
            }
            $encuesta->setEncuestaDiagnosticos($personaDiagnosticos);

            $personaSistemas = new ArrayCollection();
            foreach ($dataDiagnostico['sistemas'] as $sistema) {
                $personaSistemas[] = $em->getRepository('AppBundle:SistemaAfectado')->find($sistema);
            }
            $encuesta->setEncuestaSistemas($personaSistemas);

            $personaFunciones = new ArrayCollection();
            foreach ($dataDiagnostico['funciones'] as $funcion) {
                $personaFunciones[] = $em->getRepository('AppBundle:FuncionAfectado')->find($funcion);
            }
            $encuesta->setEncuestaFunciones($personaFunciones);

            if ($dataGenerales['entrevistadores'] != '') {
                $personaEntrevistadores = new ArrayCollection();
                foreach ($dataGenerales['entrevistadores'] as $entrevistador) {
                    $personaEntrevistadores[] = $em->getRepository('AppBundle:Usuario')->find($entrevistador);
                }
                $encuesta->setEncuestaEntrevistadores($personaEntrevistadores);
            }

            $em->persist($encuesta);
            $em->flush();
            $msg = $encuesta;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La encuesta ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al registrar los datos generales de la encuesta';
            }
        }
        return $msg;
    }

    public function agregarEncuestaPreguntas($encuesta, $dataPreguntas)
    {
        try {
            $em = $this->getEntityManager();

            $msg = "";

            foreach ($dataPreguntas as $pregunta) {

                $encuestaPreguntas = new EncuestaPregunta();
                $encuestaPreguntas->setEncuesta($encuesta);

                $preguntaNombre = $em->getRepository('AppBundle:Pregunta')->find($pregunta['idPregunta']);
                $encuestaPreguntas->setPregunta($preguntaNombre);

                $encuestaPreguntas->setRespuesta($pregunta['resultado']);

                if ($pregunta['resultado'] !== '-1') {
                    $calificador = trim($pregunta['codigo']) . $pregunta['resultado'];
                    $encuestaPreguntas->setCalificador($calificador);
                }

                $em->persist($encuestaPreguntas);
                $em->flush();
                $msg = $encuestaPreguntas;
            }

        } catch (Exception $e) {

            $msg = 'Se produjo un error al insertar el cuestionario de la encuesta.';
        }
        return $msg;
    }

    public function masterModificarEncuesta($user, $dataPersona, $dataGenerales, $dataDiagnostico, $dataPreguntas)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //modificar las generales y el diagnostico de la encuesta
            $persona = $this->modificarPersona($dataGenerales['idPersona'], $dataPersona);

            if (is_string($persona)) {
                $em->rollback();
                return $persona;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Modificar',
                'descripcion' => 'Se modificaron los datos generales de la persona: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosPersona = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosPersona)) {
                $em->rollback();
                return $trazaDatosPersona;
            }

            //modificar las generales y el diagnostico de la encuesta
            $encuesta = $this->modificarEncuesta($user->getId(), $dataGenerales, $dataDiagnostico);

            if (is_string($encuesta)) {
                $em->rollback();
                return $encuesta;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Modificar',
                'descripcion' => 'Se modificaron los datos generales de la encuesta: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosGenerales = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosGenerales)) {
                $em->rollback();
                return $trazaDatosGenerales;
            }

            //Eliminar las preguntas de la encuesta
            $encuestaPreguntas = $this->eliminarPreguntasEncuesta($encuesta);

            if (is_string($encuestaPreguntas)) {
                $em->rollback();
                return $encuestaPreguntas;
            }

            $existenPreguntas = false;

            if ($dataPreguntas['d1']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d1']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d2']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d2']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d3']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d3']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d4']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d4']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d5']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d5']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d6']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d6']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d7']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d7']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d8']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d8']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($dataPreguntas['d9']) {
                $preguntas = $this->agregarEncuestaPreguntas($encuesta, $dataPreguntas['d9']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($existenPreguntas) {
                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Modificar',
                    'descripcion' => 'Se modificaron las preguntas de la encuesta: ' . $persona->getCarnetIdentidad()
                );
                $trazaPreguntas = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaPreguntas)) {
                    $em->rollback();
                    return $trazaPreguntas;
                }
            }

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al modificar la encuesta';
        }
        return $msg;
    }

    public function modificarPersona($id, $dataPersona)
    {
        try {
            $em = $this->getEntityManager();
            $persona = $em->getRepository('AppBundle:Persona')->find($id);

            if (!empty($persona)) {
                $persona->setNombre(strtoupper($dataPersona['nombre']));
                $persona->setPrimerApellido(strtoupper($dataPersona['primerApellido']));
                $persona->setSegundoApellido(strtoupper($dataPersona['segundoApellido']));
                $persona->setFechaNacimiento(new DateTime($dataPersona['fechaNacimiento']));
                $persona->setSexo($dataPersona['sexo']);

                $em->flush();
                $msg = $persona;
            } else {
                $msg = $persona;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar los datos generales de la persona';
        }

        return $msg;
    }

    public function modificarEncuesta($user, $dataGenerales, $dataDiagnostico)
    {
        try {
            $em = $this->getEntityManager();
            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($dataGenerales['id']);

            if (!empty($encuesta)) {
                $encuesta->setFechaValoracion(new DateTime($dataGenerales['fechaValoracion']));
                $encuesta->setEdad($dataGenerales['edad']);
                $encuesta->setGenero($dataGenerales['genero']);

                $policlinico = $em->getRepository('AppBundle:Policlinico')->find($dataGenerales['policlinico']);
                $encuesta->setPoliclinico($policlinico);

                $muncipioResidencia = $em->getRepository('AppBundle:Municipio')->find($dataGenerales['municipioResidencia']);
                $encuesta->setMuncipioResidencia($muncipioResidencia);

                $estadoCivil = $em->getRepository('AppBundle:EstadoCivil')->find($dataGenerales['estadoCivil']);
                $encuesta->setEstadoCivil($estadoCivil);

                $registra = $em->getRepository('AppBundle:Usuario')->find($user);
                $encuesta->setUsuarioRegistra($registra);

                $personaEmpleos = new ArrayCollection();
                foreach ($dataGenerales['empleos'] as $empleo) {
                    $personaEmpleos[] = $em->getRepository('AppBundle:Empleo')->findOneBy(array('nombre' => $empleo));
                }
                $encuesta->setEncuestaEmpleos($personaEmpleos);

                $personaGrados = new ArrayCollection();
                foreach ($dataDiagnostico['grados'] as $grado) {
                    $personaGrados[] = $em->getRepository('AppBundle:GradoIndependencia')->findOneBy(array('nombre' => $grado));
                }
                $encuesta->setEncuestaGrados($personaGrados);

                $personaFactores = new ArrayCollection();
                foreach ($dataDiagnostico['factores'] as $factor) {
                    $personaFactores[] = $em->getRepository('AppBundle:FactorRiesgo')->findOneBy(array('nombre' => $factor));
                }
                $encuesta->setEncuestaRiesgos($personaFactores);

                $personaDiagnosticos = new ArrayCollection();
                foreach ($dataDiagnostico['diagnosticos'] as $diagnostico) {
                    $personaDiagnosticos[] = $em->getRepository('AppBundle:DiagnosticoMedico')->findOneBy(array('nombre' => $diagnostico));
                }
                $encuesta->setEncuestaDiagnosticos($personaDiagnosticos);

                $personaSistemas = new ArrayCollection();
                foreach ($dataDiagnostico['sistemas'] as $sistema) {
                    $personaSistemas[] = $em->getRepository('AppBundle:SistemaAfectado')->findOneBy(array('nombre' => $sistema));
                }
                $encuesta->setEncuestaSistemas($personaSistemas);

                $personaFunciones = new ArrayCollection();
                foreach ($dataDiagnostico['funciones'] as $funcion) {
                    $personaFunciones[] = $em->getRepository('AppBundle:FuncionAfectado')->findOneBy(array('nombre' => $funcion));
                }
                $encuesta->setEncuestaFunciones($personaFunciones);

                if ($dataGenerales['entrevistadores'] != '') {
                    $personaEntrevistadores = new ArrayCollection();
                    foreach ($dataGenerales['entrevistadores'] as $entrevistador) {
                        $personaEntrevistadores[] = $em->getRepository('AppBundle:Usuario')->findOneBy(array('nombreCompleto' => $entrevistador));
                    }
                    $encuesta->setEncuestaEntrevistadores($personaEntrevistadores);
                }

                $em->flush();
                $msg = $encuesta;
            } else {
                $msg = $encuesta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar los datos generales de la encuesta';
        }

        return $msg;
    }

    public function masterEliminarEncuesta($user, $id)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //Localizar la encuesta
            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($id);

            if (!empty($encuesta)) {
                //Eliminar las preguntas de la encuesta
                $encuestaPreguntas = $this->eliminarPreguntasEncuesta($encuesta);

                if (is_string($encuestaPreguntas)) {
                    $em->rollback();
                    return $encuestaPreguntas;
                }

                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Eliminar',
                    'descripcion' => 'Se eliminaron las preguntas de la encuesta: ' . $encuesta->getPersona()->getCarnetIdentidad()
                );
                $trazaPreguntas = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaPreguntas)) {
                    $em->rollback();
                    return $trazaPreguntas;
                }

                //Eliminar la encuesta
                $encuesta = $this->eliminarEncuesta($encuesta);

                if (is_string($encuesta)) {
                    $em->rollback();
                    return $encuesta;
                }

                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Eliminar',
                    'descripcion' => 'Se eliminaron los datos generales de la encuesta: ' . $encuesta->getPersona()->getCarnetIdentidad()
                );
                $trazaDatosGenerales = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaDatosGenerales)) {
                    $em->rollback();
                    return $trazaDatosGenerales;
                }

            } else {
                $em->rollback();
                return 'Se produjo un error al localizar la encuesta';
            }

            $em->commit();
            $msg = 'ok';


        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al eliminar la encuesta';
        }
        return $msg;
    }

    public function eliminarPreguntasEncuesta($encuesta)
    {
        try {
            $em = $this->getEntityManager();

            $msg = '';

            $preguntas = $em->getRepository('AppBundle:EncuestaPregunta')->findBy(array('encuesta' => $encuesta));

            if (!empty($preguntas)) {

                foreach ($preguntas as $pregunta) {
                    $em->remove($pregunta);
                }

                $em->flush();
                $msg = $preguntas;
            }

        } catch (Exception $e) {

            $msg = 'Se produjo un error al eliminar las preguntas de la encuesta.';
        }
        return $msg;
    }

    public function eliminarEncuesta($id)
    {
        try {
            $em = $this->getEntityManager();
            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($id);

            if (!empty($encuesta)) {
                $em->remove($encuesta);
                $em->flush();
                $msg = $encuesta;
            } else {
                $msg = $encuesta;
            }

        } catch (Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen datos asociados a esta encuesta, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar la encuesta';
            }
        }
        return $msg;
    }

    public function masterAprobarEncuesta($user, $id)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {
            $supervisor = "";
            $tipoAprobacion = 1;
            $nivelAcceso = $user->getNivelAcceso()->getId();
            $rol = 4;
            //Identificar el supervisor
            switch ($nivelAcceso) {
                case '1':
                    $supervisor = "supervisor del policlÃ­nico";
                    $tipoAprobacion = 2;
                    break;
                case '2':
                    $supervisor = "supervisor municipipal";
                    $tipoAprobacion = 3;
                    break;
                case '3':
                    $supervisor = "supervisor provincial";
                    $tipoAprobacion = 4;
                    break;
                case '4':
                    $supervisor = "supervisor nacional";
                    $tipoAprobacion = 5;
                    break;
            }

            //Aprobar la encuesta
            $aprobar = $this->aprobarEncuesta($id, $tipoAprobacion);

            if (is_string($aprobar)) {
                $em->rollback();
                return $aprobar;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Aprobar',
                'descripcion' => 'El ' . $supervisor . ' aprobÃ³ la encuesta: ' . $aprobar->getPersona()->getCarnetIdentidad()
            );
            $trazaAprobar = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaAprobar)) {
                $em->rollback();
                return $trazaAprobar;
            }

            //Notificar la encuesta
            $notificar = $this->notificarEncuesta($id, $rol, $nivelAcceso);

            if (is_string($notificar)) {
                $em->rollback();
                return $notificar;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Notificar',
                'descripcion' => 'El ' . $supervisor . ' fue notificado.'
            );
            $trazaNotificar = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaNotificar)) {
                $em->rollback();
                return $trazaNotificar;
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al aprobar la encuesta';
        }
        return $msg;
    }

    public function aprobarEncuesta($id, $tipoAprobacion)
    {
        try {
            $em = $this->getEntityManager();
            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($id);

            if (!empty($encuesta)) {
                $encuesta->setAprobacion($tipoAprobacion);
                $em->flush();
                $msg = $encuesta;
            } else {
                $msg = $encuesta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al aprobar la encuesta';
        }

        return $msg;
    }

    public function notificarPrimeraEncuesta($id, $rol, $nivelAcceso)
    {
        try {
            $em = $this->getEntityManager();

            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($id);

            if (!empty($encuesta)) {
                $notificar = new Notificacion();
                $notificar->setEncuesta($encuesta);
                $role = $em->getRepository('AppBundle:Role')->find($rol);
                $notificar->setRol($role);
                $nivel = $em->getRepository('AppBundle:NivelAcceso')->find($nivelAcceso);
                $notificar->setNivel($nivel);
                $notificar->setDescripcion('Pendiente a aprobaciÃ³n');
                $em->persist($notificar);
                $em->flush();
                $msg = $notificar;

            } else {
                $msg = $encuesta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al enviar la notificaciÃ³n';
        }

        return $msg;
    }

    public function notificarEncuesta($id, $rol, $nivelAcceso)
    {
        try {
            $em = $this->getEntityManager();

            $encuesta = $em->getRepository('AppBundle:Encuesta')->find($id);

            if (!empty($encuesta)) {
                //Desactivar notificaciones anteriores
                $notificaciones = $em->getRepository('AppBundle:Notificacion')->findOneBy(array('nivel' => $nivelAcceso, 'encuesta' => $encuesta, 'estado' => true));
                if (!empty($notificaciones)) {
                    $notificaciones->setEstado(false);
                    $em->flush();
                }
                if ($nivelAcceso < 4) {
                    $notificar = new Notificacion();
                    $notificar->setEncuesta($encuesta);
                    $role = $em->getRepository('AppBundle:Role')->find($rol);
                    $notificar->setRol($role);
                    $nivel = $em->getRepository('AppBundle:NivelAcceso')->find($nivelAcceso + 1);
                    $notificar->setNivel($nivel);
                    $notificar->setDescripcion('Pendiente a aprobaciÃ³n');
                    $em->persist($notificar);
                    $em->flush();
                    $msg = $notificar;
                } else {
                    $msg = $encuesta;
                }
            } else {
                $msg = $encuesta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al enviar la notificaciÃ³n';
        }

        return $msg;
    }

    public function masterImportarEncuesta($user, $data)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try {

            //agregar o modificar persona
            $persona = $this->agregarModificarPersona($data);

            if (is_string($persona)) {
                $em->rollback();
                return $persona;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Importar',
                'descripcion' => 'Se importaron los datos generales de la persona: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosPersona = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosPersona)) {
                $em->rollback();
                return $trazaDatosPersona;
            }

            //agregar las generales y el diagnostico de la encuesta
            $encuesta = $this->importarEncuesta($user->getId(), $data, $persona);

            if (is_string($encuesta)) {
                $em->rollback();
                return $encuesta;
            }

            //se crea la traza
            $dataTraza = array(
                'modulo' => 'Encuesta',
                'accion' => 'Importar',
                'descripcion' => 'Se importaron los datos generales de la encuesta: ' . $persona->getCarnetIdentidad()
            );
            $trazaDatosGenerales = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

            if (is_string($trazaDatosGenerales)) {
                $em->rollback();
                return $trazaDatosGenerales;
            }

            $existenPreguntas = false;

            if ($data['preguntasD1']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD1']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD2']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD2']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD3']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD3']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD4']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD4']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD5']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD5']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD6']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD6']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD7']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD7']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD8']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD8']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($data['preguntasD9']) {
                $preguntas = $this->importarEncuestaPreguntas($encuesta, $data['preguntasD9']);
                if (is_string($preguntas)) {
                    $em->rollback();
                    return $preguntas;
                }
                $existenPreguntas = true;
            }

            if ($existenPreguntas) {
                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Importar',
                    'descripcion' => 'Se importaron las preguntas de la encuesta: ' . $persona->getCarnetIdentidad()
                );
                $trazaPreguntas = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaPreguntas)) {
                    $em->rollback();
                    return $trazaPreguntas;
                }

                $nivelAcceso = 1;
                $rol = 4;
                //Notificar la encuesta
                $notificar = $this->notificarPrimeraEncuesta($encuesta->getId(), $rol, $nivelAcceso);

                if (is_string($notificar)) {
                    $em->rollback();
                    return $notificar;
                }

                //se crea la traza
                $dataTraza = array(
                    'modulo' => 'Encuesta',
                    'accion' => 'Notificar',
                    'descripcion' => 'El supervisor del policlÃ­nico fue notificado.'
                );
                $trazaNotificar = $em->getRepository('AppBundle:Traza')->guardarTraza($user, $dataTraza);

                if (is_string($trazaNotificar)) {
                    $em->rollback();
                    return $trazaNotificar;
                }
            }

            $em->commit();
            $msg = 'ok';

        } catch (Exception $e) {

            $em->rollback();
            $msg = 'Se produjo un error al importar la encuesta';
        }
        return $msg;
    }

    public function importarEncuesta($user, $data, $persona)
    {
        try {
            $em = $this->getEntityManager();
            $encuesta = new Encuesta();
            $encuesta->setFechaValoracion(new DateTime($data['fechaValoracion']));
            $encuesta->setEdad($data['edad']);
            $encuesta->setAprobacion(1);

            $policlinico = $em->getRepository('AppBundle:Policlinico')->findOneBy(array('nombre' => $data['policlicnico']));
            $encuesta->setPoliclinico($policlinico);

            $muncipioResidencia = $em->getRepository('AppBundle:Municipio')->findOneBy(array('nombre' => $data['municipioResidencia']));
            $encuesta->setMuncipioResidencia($muncipioResidencia);

            $estadoCivil = $em->getRepository('AppBundle:EstadoCivil')->findOneBy(array('nombre' => $data['estadoCivil']));
            $encuesta->setEstadoCivil($estadoCivil);

            $registra = $em->getRepository('AppBundle:Usuario')->find($user);
            $encuesta->setUsuarioRegistra($registra);

            $encuesta->setPersona($persona);

            $personaEmpleos = new ArrayCollection();
            foreach ($data['empleos'] as $empleo) {
                $personaEmpleos[] = $em->getRepository('AppBundle:Empleo')->findOneBy(array('nombre' => $empleo));
            }
            $encuesta->setEncuestaEmpleos($personaEmpleos);

            $personaGrados = new ArrayCollection();
            foreach ($data['grados'] as $grado) {
                $personaGrados[] = $em->getRepository('AppBundle:GradoIndependencia')->findOneBy(array('nombre' => $grado));
            }
            $encuesta->setEncuestaGrados($personaGrados);

            $personaFactores = new ArrayCollection();
            foreach ($data['factores'] as $factor) {
                $personaFactores[] = $em->getRepository('AppBundle:FactorRiesgo')->findOneBy(array('nombre' => $factor));
            }
            $encuesta->setEncuestaRiesgos($personaFactores);

            $personaDiagnosticos = new ArrayCollection();
            foreach ($data['diagnosticos'] as $diagnostico) {
                $personaDiagnosticos[] = $em->getRepository('AppBundle:DiagnosticoMedico')->findOneBy(array('nombre' => $diagnostico));
            }
            $encuesta->setEncuestaDiagnosticos($personaDiagnosticos);

            $personaSistemas = new ArrayCollection();
            foreach ($data['sistemas'] as $sistema) {
                $personaSistemas[] = $em->getRepository('AppBundle:SistemaAfectado')->findOneBy(array('nombre' => $sistema));
            }
            $encuesta->setEncuestaSistemas($personaSistemas);

            $personaFunciones = new ArrayCollection();
            foreach ($data['funciones'] as $funcion) {
                $personaFunciones[] = $em->getRepository('AppBundle:FuncionAfectado')->findOneBy(array('nombre' => $funcion));
            }
            $encuesta->setEncuestaFunciones($personaFunciones);

            if ($data['entrevistadores'] != '') {
                $personaEntrevistadores = new ArrayCollection();
                foreach ($data['entrevistadores'] as $entrevistador) {
                    $personaEntrevistadores[] = $em->getRepository('AppBundle:Usuario')->findOneBy(array('nombreCompleto' => $entrevistador));
                }
                $encuesta->setEncuestaEntrevistadores($personaEntrevistadores);
            }

            $em->persist($encuesta);
            $em->flush();
            $msg = $encuesta;

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La encuesta ya existe, no se puede importar';
            } else {
                $msg = 'Se produjo un error al importar los datos generales de la encuesta';
            }
        }
        return $msg;
    }

    public function importarEncuestaPreguntas($encuesta, $dataPreguntas)
    {
        try {
            $em = $this->getEntityManager();

            $msg = "";

            foreach ($dataPreguntas as $pregunta) {

                $encuestaPreguntas = new EncuestaPregunta();
                $encuestaPreguntas->setEncuesta($encuesta);

                $preguntaNombre = $em->getRepository('AppBundle:Pregunta')->find($pregunta['idPregunta']);
                $encuestaPreguntas->setPregunta($preguntaNombre);

                $encuestaPreguntas->setRespuesta($pregunta['resultado']);

                if ($pregunta['resultado'] !== '-1') {
                    $calificador = trim($pregunta['codigo']) . $pregunta['resultado'];
                    $encuestaPreguntas->setCalificador($calificador);
                }

                $em->persist($encuestaPreguntas);
                $em->flush();
                $msg = $encuestaPreguntas;
            }

        } catch (Exception $e) {

            $msg = 'Se produjo un error al importar el cuestionario de la encuesta.';
        }
        return $msg;
    }

    // Exportar a Excel

    //Reportes de dominios de preguntas
    public function obtenerEntrevistados($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT count(e) as total
                FROM AppBundle:Encuesta e
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        $total = $query->getResult();

        return $total[0]['total'];

    }

    public function obtenerDominios($idPoliclinico, $year, $idDominio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT p.nombre as pregunta, count(e) as total
                FROM AppBundle:EncuestaPregunta ep
                JOIN ep.pregunta p
                JOIN ep.encuesta e
                JOIN p.tipoDominio t
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                AND t.id = :p2
                GROUP BY p.nombre
                ORDER BY p.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);
        $query->setParameter('p2', $idDominio);

        return $query->getResult();

    }

    public function obtenerDominiosRepuestas($idPoliclinico, $year, $idDominio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT p.nombre as pregunta, ep.respuesta, count(e) as total
                FROM AppBundle:EncuestaPregunta ep
                JOIN ep.pregunta p
                JOIN ep.encuesta e
                JOIN p.tipoDominio t
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                AND t.id = :p2
                GROUP BY p.nombre, ep.respuesta
                ORDER BY p.id, ep.respuesta";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);
        $query->setParameter('p2', $idDominio);

        return $query->getResult();

    }

    //Reportes de sexo y grupo de edades
    public function obtenerGradoIndependencia($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT g.nombre, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_grados g
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY g.nombre
                ORDER BY g.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerGradoIndependenciaSexoEdad($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT g.nombre, p.sexo, e.edad, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.persona p
                JOIN e.encuesta_grados g
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY g.nombre, p.sexo, e.edad
                ORDER BY g.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerEmpleo($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT em.nombre, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_empleos em
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY em.nombre
                ORDER BY em.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerEmpleoSexoEdad($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT em.nombre, p.sexo, e.edad, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.persona p
                JOIN e.encuesta_empleos em
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY em.nombre, p.sexo, e.edad
                ORDER BY em.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerFuncionAfectada($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT f.nombre, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY f.nombre
                ORDER BY f.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerFuncionAfectadaSexoEdad($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT f.nombre, p.sexo, e.edad, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.persona p
                JOIN e.encuesta_funciones f
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY f.nombre, p.sexo, e.edad
                ORDER BY f.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerFactorRiesgo($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT f.nombre, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_riesgos f
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY f.nombre
                ORDER BY f.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerFactorRiesgoSexoEdad($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT f.nombre, p.sexo, e.edad, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_riesgos f
                JOIN e.persona p
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY f.nombre, p.sexo, e.edad
                ORDER BY f.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerSistemaAfectado($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT s.nombre, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_sistemas s
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY s.nombre
                ORDER BY s.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    public function obtenerSistemaAfectadoSexoEdad($idPoliclinico, $year)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT s.nombre, p.sexo, e.edad, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.persona p
                JOIN e.encuesta_sistemas s
                WHERE e.fechaValoracion LIKE '%" . $year . "%'
                AND e.policlinico = :p1
                GROUP BY s.nombre, p.sexo, e.edad
                ORDER BY s.id";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idPoliclinico);

        return $query->getResult();

    }

    //Dashboard

    public function obtenerTotalEntrevistados()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT count(e) as total
                FROM AppBundle:Encuesta e";

        $query = $em->createQuery($dql);
        $total = $query->getResult();

        return $total[0]['total'];

    }

    public function obtenerTotalEntrevistadosProvincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE p.nombre = :p1";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $provincia);

        $total = $query->getResult();

        return $total[0]['total'];

    }

    public function obtenerTotalEntrevistadosMunicipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE m.nombre = :p1";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $municipio);

        $total = $query->getResult();

        return $total[0]['total'];

    }

    public function obtenerEntrevistadosGenero()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.genero, count(e) as total
                FROM AppBundle:Encuesta e
                GROUP BY e.genero";

        return $em->createQuery($dql)->getResult();

    }

    public function obtenerEntrevistadosGeneroProvincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.genero, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE p.nombre = :p1
                GROUP BY e.genero";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $provincia);

        return $query->getResult();

    }

    public function obtenerEntrevistadosgeneroMunicipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT e.genero, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE m.nombre = :p1
                GROUP BY e.genero";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $municipio);

        return $query->getResult();

    }

    public function obtenerProvincias()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT p.nombre as provincia, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                GROUP BY p.nombre";

        return $em->createQuery($dql)->getResult();

    }

    public function obtenerMunicipios($provincia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT m.nombre as municipio, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE p.nombre = :p1
                GROUP BY m.nombre
                ORDER BY total DESC";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $provincia);

        return $query->getResult();

    }

    public function obtenerGrados()
    {
        $em = $this->getEntityManager();

        $dql = "SELECT g.nombre as grado, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_grados g
                GROUP BY g.nombre";

        return $em->createQuery($dql)->getResult();

    }

    public function obtenerGradosProvincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT g.nombre as grado, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_grados g
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE p.nombre = :p1
                GROUP BY g.nombre";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $provincia);

        return $query->getResult();

    }

    public function obtenerGradosMunicipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT g.nombre as grado, count(e) as total
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_grados g
                JOIN e.muncipioResidencia m
                WHERE m.nombre = :p1
                GROUP BY g.nombre";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $municipio);

        return $query->getResult();

    }

    public function obtenerGeneroMenor18($genero)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                WHERE e.edad < :p1
                AND e.genero =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);
        $query->setParameter('p2', $genero);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGeneroMenor18Provincia($genero, $provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad < :p1
                AND e.genero =:p2
                AND p.nombre = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);
        $query->setParameter('p2', $genero);
        $query->setParameter('p3', $provincia);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGeneroMenor18Municipio($genero, $municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE e.edad < :p1
                AND e.genero =:p2
                AND m.nombre = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);
        $query->setParameter('p2', $genero);
        $query->setParameter('p3', $municipio);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero1929($genero)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);
        $query->setParameter('p3', $genero);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero1929Provincia($genero, $provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND p.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $provincia);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero1929Municipio($genero, $municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND m.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $municipio);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero3059($genero)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);
        $query->setParameter('p3', $genero);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero3059Provincia($genero, $provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND p.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $provincia);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero3059Municipio($genero, $municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND m.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $municipio);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero6069($genero)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);
        $query->setParameter('p3', $genero);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero6069Provincia($genero,$provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND p.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $provincia);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGenero6069Municipio($genero,$municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND e.genero =:p3
                AND m.nombre = :p4';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);
        $query->setParameter('p3', $genero);
        $query->setParameter('p4', $municipio);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGeneroMayor70($genero)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                WHERE e.edad > :p1
                AND e.genero =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);
        $query->setParameter('p2', $genero);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGeneroMayor70Provincia($genero,$provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.genero =:p2
                AND p.nombre = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);
        $query->setParameter('p2', $genero);
        $query->setParameter('p3', $provincia);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerGeneroMayor70Municipio($genero,$municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.genero =:p2
                AND m.nombre = :p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);
        $query->setParameter('p2', $genero);
        $query->setParameter('p3', $municipio);

        $total = $query->getResult();

        return $total[0]['cantidad'];

    }

    public function obtenerFuncionMenor18()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.edad < :p1
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);

        return $query->getResult();

    }

    public function obtenerFuncionMenor18Provincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad < :p1
                AND p.nombre = :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);
        $query->setParameter('p2', $provincia);

        return $query->getResult();

    }

    public function obtenerFuncionMenor18Municipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                WHERE e.edad < :p1
                AND m.nombre = :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 19);
        $query->setParameter('p2', $municipio);

        return $query->getResult();

    }

    public function obtenerFuncion1929()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.edad > :p1
                AND e.edad < :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);

        return $query->getResult();

    }

    public function obtenerFuncion1929Provincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND p.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);
        $query->setParameter('p3', $provincia);

        return $query->getResult();

    }

    public function obtenerFuncion1929Municipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND m.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 18);
        $query->setParameter('p2', 30);
        $query->setParameter('p3', $municipio);

        return $query->getResult();

    }

    public function obtenerFuncion3059()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.edad > :p1
                AND e.edad < :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);

        return $query->getResult();

    }

    public function obtenerFuncion3059Provincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND p.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);
        $query->setParameter('p3', $provincia);

        return $query->getResult();

    }

    public function obtenerFuncion3059Municipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND m.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 29);
        $query->setParameter('p2', 60);
        $query->setParameter('p3', $municipio);

        return $query->getResult();

    }

    public function obtenerFuncion6069()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.edad > :p1
                AND e.edad < :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);

        return $query->getResult();
    }

    public function obtenerFuncion6069Provincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND p.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);
        $query->setParameter('p3', $provincia);

        return $query->getResult();
    }

    public function obtenerFuncion6069Municipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND e.edad < :p2
                AND m.nombre = :p3
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 59);
        $query->setParameter('p2', 70);
        $query->setParameter('p3', $municipio);

        return $query->getResult();
    }

    public function obtenerFuncionMayor70()
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                WHERE e.edad > :p1
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);

        return $query->getResult();
    }

    public function obtenerFuncionMayor70Provincia($provincia)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.muncipioResidencia m
                JOIN m.provincia p
                JOIN e.encuesta_funciones f
                WHERE e.edad > :p1
                AND p.nombre = :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);
        $query->setParameter('p2', $provincia);

        return $query->getResult();
    }

    public function obtenerFuncionMayor70Municipio($municipio)
    {
        $em = $this->getEntityManager();

        $dql = 'SELECT f.nombre as funcion, COUNT(e) as cantidad
                FROM AppBundle:Encuesta e
                JOIN e.encuesta_funciones f
                JOIN e.muncipioResidencia m
                WHERE e.edad > :p1
                AND m.nombre = :p2
                GROUP BY f.nombre';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 69);
        $query->setParameter('p2', $municipio);

        return $query->getResult();
    }

}
