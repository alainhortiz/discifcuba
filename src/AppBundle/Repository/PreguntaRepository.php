<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Pregunta;
use Doctrine\ORM\EntityRepository;
use Exception;

/**
 * PreguntaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreguntaRepository extends EntityRepository
{
    public function agregarPregunta($data)
    {
        try {
            $em = $this->getEntityManager();

            if ($this->verificarDominio($data)) {
                $pregunta = new Pregunta();
                $this->savePregunta($pregunta,$data);

                $dominio = $em->getRepository('AppBundle:TipoDominio')->find($data['dominio']);
                $this->saveDominio($dominio,$pregunta);
                $em->persist($pregunta);
                $em->flush();
                $msg = $pregunta;
            } else {
                $msg = 'Código incorrecto';
            }

        } catch (Exception $e) {
            if (strpos($e->getMessage(), 'Duplicate entry') > 0) {
                $msg = 'La pregunta ya existe, no se puede agregar';
            } else {
                $msg = 'Se produjo un error al insertar la pregunta';
            }
        }

        return $msg;
    }

    public function modificarPregunta($data)
    {
        try {
            $em = $this->getEntityManager();
            $pregunta = $em->getRepository('AppBundle:Pregunta')->find($data['idPregunta']);

            if (!empty($pregunta)) {
                if ($this->verificarDominio($data)) {
                    $this->savePregunta($pregunta,$data);

                    $dominio = $em->getRepository('AppBundle:TipoDominio')->find($data['dominio']);
                    $this->saveDominio($dominio,$pregunta);
                    $em->flush();
                    $msg = $pregunta;
                } else {
                    $msg = 'Código incorrecto';
                }
            } else {
                $msg = $pregunta;
            }

        } catch (Exception $e) {
            $msg = 'Se produjo un error al modificar la pregunta';
        }

        return $msg;
    }

    public function verificarDominio($data)
    {
        try {
            $em = $this->getEntityManager();
            $dominio = $em->getRepository('AppBundle:TipoDominio')->find($data['dominio']);

            $msg = false;

            if (!empty($dominio) && strpos($data['codigo'], $dominio->getCodigo()) === 0) {
                $msg = true;
            }

        } catch (Exception $e) {
            $msg = false;
        }

        return $msg;
    }

    public function eliminarPregunta($id)
    {
        try {
            $em = $this->getEntityManager();
            $pregunta = $em->getRepository('AppBundle:Pregunta')->find($id);

            if (!empty($pregunta)) {
                $em->remove($pregunta);
                $em->flush();
                $msg = $pregunta;
            } else {
                $msg = $pregunta;
            }

        } catch (Exception $e) {

            if (strpos($e->getMessage(), 'foreign key') > 0) {
                $msg = 'Existen datos asociados a esta pregunta, no se puede eliminar';
            } else {
                $msg = 'Se produjo un error al eliminar la pregunta';
            }
        }
        return $msg;
    }

    public function obtenerTotalPreguntas($idDominio)
    {
        $em = $this->getEntityManager();

        $dql = "SELECT count(p) as total
                FROM AppBundle:Pregunta p
                WHERE p.tipoDominio < :p1";

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idDominio);

        $total = $query->getResult();

        return $total[0]['total'] + 1;

    }

    private function savePregunta($pregunta,$data){
        $pregunta->setNombre($data['nombre']);
        $pregunta->setCodigo($data['codigo']);
    }

    private function saveDominio($dominio,$pregunta){
        $pregunta->setTipoDominio($dominio);
    }
}
